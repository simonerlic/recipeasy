////  RecipeAttemptsView.swift//  recipeasy////  Created by Simon Erlic on 2024-11-17.//import SwiftUIstruct RecipeAttemptsView: View {    let recipe: Recipe    @State private var showingAddAttempt = false        var body: some View {        VStack(alignment: .leading, spacing: 16) {            SectionHeader(title: "Previous Attempts")                        if recipe.attempts.isEmpty {                Text("No attempts yet")                    .foregroundStyle(.secondary)                    .padding(.vertical, 8)            } else {                ScrollView(.horizontal, showsIndicators: false) {                    LazyHStack(spacing: 16) {                        ForEach(recipe.attempts.sorted(by: { $0.dateCreated > $1.dateCreated })) { attempt in                            AttemptCard(attempt: attempt)                        }                    }                }            }                        Button(action: { showingAddAttempt = true }) {                Label("Add Attempt", systemImage: "plus.circle")            }        }        .sheet(isPresented: $showingAddAttempt) {            NavigationStack {                AddAttemptView(recipe: recipe)            }            .presentationDragIndicator(.visible)        }    }}struct AttemptCard: View {    let attempt: RecipeAttempt        var body: some View {        CardView {            VStack(alignment: .leading, spacing: 12) {                if let imageData = attempt.imageData,                   let uiImage = UIImage(data: imageData) {                    Image(uiImage: uiImage)                        .resizable()                        .scaledToFill()                        .frame(width: 200, height: 150)                        .clipped()                }                                VStack(alignment: .leading, spacing: 8) {                    HStack {                        Text(attempt.dateCreated.formatted(date: .abbreviated, time: .omitted))                            .font(.caption)                            .foregroundStyle(.secondary)                                                Spacer()                                                if let rating = attempt.rating {                            HStack(spacing: 2) {                                ForEach(0..<5) { index in                                    Image(systemName: index < rating ? "star.fill" : "star")                                        .foregroundStyle(.yellow)                                        .font(.caption)                                }                            }                        }                    }                                        if !attempt.notes.isEmpty {                        Text(attempt.notes)                            .font(.callout)                            .lineLimit(3)                    }                }                .padding()            }        }        .frame(width: 200)    }}struct AddAttemptView: View {    @Environment(\.modelContext) private var modelContext    @Environment(\.dismiss) private var dismiss    let recipe: Recipe        @State private var notes = ""    @State private var imageData: Data?    @State private var rating: Int?        var body: some View {        Form {            Section(header: Text("Photo")) {                ImagePicker(imageData: $imageData, title: "Finished Dish")            }                        Section(header: Text("Rating")) {                HStack {                    ForEach(1...5, id: \.self) { star in                        Image(systemName: (rating ?? 0) >= star ? "star.fill" : "star")                            .foregroundStyle(.yellow)                            .onTapGesture {                                rating = star                            }                    }                }                .padding(.vertical, 4)            }                        Section(header: Text("Notes")) {                TextField("How did it turn out?", text: $notes, axis: .vertical)                    .lineLimit(3...6)            }        }        .navigationTitle("Add Attempt")        .navigationBarTitleDisplayMode(.inline)        .toolbar {            ToolbarItem(placement: .navigationBarLeading) {                Button("Cancel") {                    dismiss()                }            }            ToolbarItem(placement: .navigationBarTrailing) {                Button("Save") {                    let attempt = RecipeAttempt(                        recipe: recipe,                        notes: notes,                        imageData: imageData,                        rating: rating                    )                    modelContext.insert(attempt)                    dismiss()                }                .disabled(imageData == nil && notes.isEmpty && rating == nil)            }        }    }}